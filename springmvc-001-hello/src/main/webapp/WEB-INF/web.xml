<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--声明，注册springmvc的核心对象Dispatcherservlet
        需要在tomcat服务器启动后，创建Dispatcherservlet对象的实例？
        因为Dispatcherservlet在他的创建过程中，会同时创建springmvc容器对象，读取springmvc的配置文件，把这个配置文件中的对象都创建好，当用户发起请求时就可以直接使用对象了。
        servlet的初始化会执行init(）方法。 Dispatcherservlet在init()中{
        1.创建容器，读取配置文件, WebApplicationContext ct = new classPath×mlApplicationContext ("springmvc. xmI");
        2.把容器对象放入到servletcontext中, getservletcontext() .setAttribute (key ,Ictx)

        -在tomcat启动后，创建Servlet对象
        1oad-on-startup：表示tomcat启动后创建对象的顺序。它的值是整数，数值越小，
        tomcat 创建对象的时间越早。 大于等于0的整数.
    -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- springmyc创建容器对象时，读取的配置文件默认是/WEB-INF/<servlet-name>-servlet.xml,如果没有定义会报错误：
      Caused by: java.io.FileNotFoundException: Could not open ServletContext resource [/WEB-INF/springmvc-servlet.xml]-->
        <!--自定义springmvc读取的配置文件的位置-->
        <init-param>
                <!--springmvc的配置文件的位置的属性-->
                <param-name>contextConfigLocation</param-name>
                <!-- 指定自定义文件的位置-->
                <param-value>classpath:springmvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!--  对于<url-pattern/>，可以写为 / ，建议写为*.do 的形式。  -->
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
</web-app>